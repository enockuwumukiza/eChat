import { apiSlice } from "./apiSlice";

const MESSAGE_URL = 'messages';

const messagesApiSlice = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        // Send Group Message
        sendGroupMessage: builder.mutation({
            query: ({ groupId, data }) => ({
                url: `${MESSAGE_URL}/group/${groupId}`,
                method: 'POST',
                body: data,
                credentials: 'include',
            }),
            // Invalidate cached messages in the group after sending a message
            invalidatesTags: [{ type: 'Messages', id: 'LIST' }],
        }),

        // Send Single Message
        sendSingleMessage: builder.mutation({
            query: ({ receiverId, data }) => ({
                url: `${MESSAGE_URL}/single/${receiverId}`,
                method: 'POST',
                body: data,
                credentials: 'include',
                
            }),
            // Invalidate cached messages for that user after sending a message
            invalidatesTags: (result, error, { receiverId }) => [
                { type: 'Messages', id: receiverId }
            ],
        }),

        // Mark Messages as Read
        markMessagesAsRead: builder.mutation({
            query: (id) => ({
                url: `${MESSAGE_URL}/read/${id}`,
                method: 'PUT',
                credentials: 'include',
            }),
            // Invalidate the cache for that message
            invalidatesTags: (result, error, id) => [{ type: 'Messages', id }],
        }),

        // Toggle Like on Message
        toggleLikeMessage: builder.mutation({
            query: (id) => ({
                url: `${MESSAGE_URL}/like/${id}`,
                method: 'PUT',
                credentials: 'include',
            }),
            // Invalidate the cache for the liked message
            invalidatesTags: (result, error, id) => [{ type: 'Messages', id }],
        }),

        // Toggle Pin on Message
        togglePinMessage: builder.mutation({
            query: (id) => ({
                url: `${MESSAGE_URL}/pin/${id}`,
                method: 'PUT',
                credentials: 'include',
            }),
            // Invalidate the cache for the pinned message
            invalidatesTags: (result, error, id) => [{ type: 'Messages', id }],
        }),

        // Get Single Message
        getSingleMessage: builder.query({
            query: (id) => ({
                url: `${MESSAGE_URL}/single/${id}`,
                method: 'GET',
                credentials: 'include',
            }),
            providesTags: (result, error, id) => [{ type: 'Messages', id }],
        }),

        // Search Messages
        searchMessages: builder.mutation({
            query: ({ chatId, data }) => ({
                url: `${MESSAGE_URL}/search/${chatId}`,
                method: 'POST',
                body: data,
                credentials: 'include',
            }),
        }),

        // Get Messages by Chat
        getMessagesByChat: builder.query({
            query: (id) => ({
                url: `${MESSAGE_URL}/${id}`,
                method: 'GET',
                credentials: 'include',
            }),
            providesTags: (result, error, id) => [{ type: 'Messages', id: `chat-${id}` }],
        }),

        // Delete Message
        deleteMessage: builder.mutation({
            query: (id) => ({
                url: `${MESSAGE_URL}/${id}`,
                method: 'DELETE',
                credentials: 'include',
            }),
            // Invalidate the cache for the deleted message
            invalidatesTags: (result, error, id) => [{ type: 'Messages', id }],
        }),
    }),
});

// Export the hooks automatically generated by `injectEndpoints`
export const {
    useSendGroupMessageMutation,
    useSendSingleMessageMutation,
    useMarkMessagesAsReadMutation,
    useToggleLikeMessageMutation,
    useTogglePinMessageMutation,
    useLazyGetSingleMessageQuery,
    useSearchMessagesMutation,
    usePrefetch,
    useLazyGetMessagesByChatQuery,
    useDeleteMessageMutation,
} = messagesApiSlice;

export { messagesApiSlice };
